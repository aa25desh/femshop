######################################
# Femshop Log for: coef
######################################

1.	Building simple quad mesh with nx*nx elements, nx=20
2.	Added mesh with 441 vertices and 400 elements.
3.	Full grid has 3362 nodes.
4.	Grid building took 0.331432199 seconds
5.	Added variable: u of type: scalar
6.	Set test function symbol: v of type: scalar
7.	Boundary condition: var=u bid=1 type=Dirichlet val=0
8.	Generated function: genfunction_0
9.	Added coefficient a : x
10.	Generated function: genfunction_1
11.	Added coefficient b : 3
12.	Generated function: genfunction_2
13.	Added coefficient c : y
14.	Added coefficient d : 0.1
15.	Generated function: genfunction_3
16.	Added coefficient f : (-5*pi*pi*x*sin(pi*x)*sin(2*pi*y) + pi*cos(pi*x)*sin(2*pi*y)) + y*sin(pi*x)*sin(2*pi*y)
17.	Making weak form for variable(s): u
18.	Weak form, input: -a*b*dot(grad(u), grad(v))*d + c*u*d*v*b - d*f*b*v
19.	Weak form, symbolic layer:
lhs = -_a_1*_b_1*_d_1*D1__u_1*D1__v_1 + -_a_1*_b_1*_d_1*D2__u_1*D2__v_1 + _v_1*_u_1*_c_1*_b_1*_d_1
rhs = _v_1*_f_1*_b_1*_d_1
20.	Weak form, code layer: LHS = begin
    var = args[1]
    x = args[2]
    gbl = args[3]
    refel = args[4]
    borl = args[5]
    time = args[6]
    (detJ, J) = geometric_factors(refel, x)
    R1matrix = [diagm(J.rx) diagm(J.sx)]
    Q1matrix = [refel.Qr; refel.Qs]
    R2matrix = [diagm(J.ry) diagm(J.sy)]
    Q2matrix = [refel.Qr; refel.Qs]
    coef_0_1 = zeros(refel.Np)
    coef_1_1 = zeros(refel.Np)
    coef_3_1 = 0.1
    coef_2_1 = zeros(refel.Np)
    for coefi = 1:refel.Np
        coef_0_1[coefi] = (a.value[1]).func(x[coefi, 1], x[coefi, 2], 0, time)
        coef_1_1[coefi] = (b.value[1]).func(x[coefi, 1], x[coefi, 2], 0, time)
        coef_2_1[coefi] = (c.value[1]).func(x[coefi, 1], x[coefi, 2], 0, time)
    end
    return -(transpose(R1matrix * Q1matrix) * (diagm((refel.wg .* detJ) .* ((coef_0_1 .* coef_1_1) .* coef_3_1)) * (R1matrix * Q1matrix))) + -(transpose(R2matrix * Q2matrix) * (diagm((refel.wg .* detJ) .* ((coef_0_1 .* coef_1_1) .* coef_3_1)) * (R2matrix * Q2matrix))) + (refel.Q)' * (diagm((refel.wg .* detJ) .* ((coef_2_1 .* coef_1_1) .* coef_3_1)) * refel.Q)
end 
  RHS = begin
    var = args[1]
    x = args[2]
    gbl = args[3]
    refel = args[4]
    borl = args[5]
    time = args[6]
    (detJ, J) = geometric_factors(refel, x)
    coef_4_1 = zeros(refel.Np)
    coef_1_1 = zeros(refel.Np)
    coef_3_1 = 0.1
    for coefi = 1:refel.Np
        coef_4_1[coefi] = (f.value[1]).func(x[coefi, 1], x[coefi, 2], 0, time)
        coef_1_1[coefi] = (b.value[1]).func(x[coefi, 1], x[coefi, 2], 0, time)
    end
    return (refel.Q)' * (diagm(refel.wg .* detJ) * (refel.Q * ((coef_4_1 .* coef_1_1) .* coef_3_1)))
end
21.	Generated function: genfunction_4
22.	Generated function: genfunction_5
23.	Assembly took 0.2562287 seconds
24.	Linear solve took 0.009883699 seconds
25.	Solved for u.(took 0.2738413 seconds)
26.	Dumping configuration:
27.		dimension = 2
28.		geometry = square
29.		mesh_type = unstructured
30.		solver_type = CG
31.		trial_function = Legendre
32.		test_function = Legendre
33.		elemental_nodes = Lobatto
34.		quadrature = Gauss
35.		p_adaptive = false
36.		basis_order_min = 2
37.		basis_order_max = 2
38.		linear = true
39.		t_adaptive = false
40.		stepper = Euler-implicit
41.		linalg_matrixfree = false
42.		linalg_backend = ours
43.		output_format = vtk
44.	Dumping problem:
45.		bc_type = ["Dirichlet"]
46.		bid = [1]
47.		bc_func = Any[0]
48.		time_dependent = false
49.		end_time = 0.0
50.		initial = Any[]
51.		lhs_time_deriv = Bool[]
52.	Completed. Closing Log.
