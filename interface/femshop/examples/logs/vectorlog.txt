######################################
# Femshop Log for: vector
######################################

1.	Building simple quad mesh with nx*nx elements, nx=30
2.	Added mesh with 961 vertices and 900 elements.
3.	Full grid has 16562 nodes.
4.	Grid building took 1.731287599 seconds
5.	Added variable: u of type: vector
6.	Set test function symbol: v of type: vector
7.	Boundary condition: var=u bid=1 type=Dirichlet val=[0, 0]
8.	Generated function: genfunction_0
9.	Generated function: genfunction_1
10.	Added coefficient f : ["-5*pi*pi*sin(pi*x)*sin(2*pi*y)", "-25*pi*pi*sin(3*pi*x)*sin(4*pi*y)"]
11.	Making weak form for variable(s): u
12.	Weak form, input: -inner(grad(u), grad(v)) - f*v
13.	Weak form, symbolic layer:
lhs = -D1__u_1*D1__v_1 + -D1__u_2*D1__v_2 + -D2__u_1*D2__v_1 + -D2__u_2*D2__v_2
rhs = _v_1*_f_1 + _v_2*_f_2
14.	Weak form, code layer: LHS = begin
    var = args[1]
    x = args[2]
    gbl = args[3]
    refel = args[4]
    borl = args[5]
    time = args[6]
    (detJ, J) = geometric_factors(refel, x)
    R1matrix = [diagm(J.rx) diagm(J.sx)]
    Q1matrix = [refel.Qr; refel.Qs]
    R2matrix = [diagm(J.ry) diagm(J.sy)]
    Q2matrix = [refel.Qr; refel.Qs]
    full_matrix = zeros(refel.Np * 2, refel.Np * 2)
    full_matrix[0 * refel.Np + 1:(0 + 1) * refel.Np, 0 * refel.Np + 1:(0 + 1) * refel.Np] += -(transpose(R1matrix * Q1matrix) * diagm(refel.wg .* detJ) * (R1matrix * Q1matrix))
    full_matrix[1 * refel.Np + 1:(1 + 1) * refel.Np, 1 * refel.Np + 1:(1 + 1) * refel.Np] += -(transpose(R1matrix * Q1matrix) * diagm(refel.wg .* detJ) * (R1matrix * Q1matrix))
    full_matrix[0 * refel.Np + 1:(0 + 1) * refel.Np, 0 * refel.Np + 1:(0 + 1) * refel.Np] += -(transpose(R2matrix * Q2matrix) * diagm(refel.wg .* detJ) * (R2matrix * Q2matrix))
    full_matrix[1 * refel.Np + 1:(1 + 1) * refel.Np, 1 * refel.Np + 1:(1 + 1) * refel.Np] += -(transpose(R2matrix * Q2matrix) * diagm(refel.wg .* detJ) * (R2matrix * Q2matrix))
    return full_matrix
end 
  RHS = begin
    var = args[1]
    x = args[2]
    gbl = args[3]
    refel = args[4]
    borl = args[5]
    time = args[6]
    (detJ, J) = geometric_factors(refel, x)
    coef_0_1 = zeros(refel.Np)
    coef_0_2 = zeros(refel.Np)
    for coefi = 1:refel.Np
        coef_0_1[coefi] = (f.value[1]).func(x[coefi, 1], x[coefi, 2], 0, time)
        coef_0_2[coefi] = (f.value[2]).func(x[coefi, 1], x[coefi, 2], 0, time)
    end
    full_vector = zeros(refel.Np * 2)
    full_vector[0 * refel.Np + 1:(0 + 1) * refel.Np] += (refel.Q)' * (diagm(refel.wg .* detJ) * (refel.Q * coef_0_1))
    full_vector[1 * refel.Np + 1:(1 + 1) * refel.Np] += (refel.Q)' * (diagm(refel.wg .* detJ) * (refel.Q * coef_0_2))
    return full_vector
end
15.	Generated function: genfunction_2
16.	Generated function: genfunction_3
17.	Assembly took 6.6149686 seconds
18.	Linear solve took 0.103673601 seconds
19.	Solved for u.(took 6.727380999 seconds)
20.	Dumping configuration:
21.		dimension = 2
22.		geometry = square
23.		mesh_type = unstructured
24.		solver_type = CG
25.		trial_function = Legendre
26.		test_function = Legendre
27.		elemental_nodes = Lobatto
28.		quadrature = Gauss
29.		p_adaptive = false
30.		basis_order_min = 3
31.		basis_order_max = 3
32.		linear = true
33.		t_adaptive = false
34.		stepper = Euler-implicit
35.		linalg_matrixfree = false
36.		linalg_backend = ours
37.		output_format = vtk
38.	Dumping problem:
39.		bc_type = ["Dirichlet"]
40.		bid = [1]
41.		bc_func = Any[Any[0, 0]]
42.		time_dependent = false
43.		end_time = 0.0
44.		initial = Any[]
45.		lhs_time_deriv = Bool[]
46.	Completed. Closing Log.
