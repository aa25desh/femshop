#=
Module for code generation
=#

module CodeGenerator

include("femshop_constants.jl");

export init_codegenerator, finalize_codegenerator, Genfiles

# Holds a set of file streams for generated code
mutable struct Genfiles
    main;
    # add more files as needed
end

function init_codegenerator(lang, dir, name, header)
    global language = lang;
    global genDir = dir;
    global genFileName = name;
    global genFileExtension = "";
    global commentChar = "";
    global blockCommentChar = [];
    global headerText = header;

    if language == JULIA
        genFileExtension = ".jl";
        commentChar = "#";
        blockCommentChar = ["#="; "=#"];
    elseif language == CPP
        genFileExtension = ".cpp";
        commentChar = "//";
        blockCommentChar = ["/*"; "*/"];
    elseif language == MATLAB
        genFileExtension = ".m";
        commentChar = "%";
        blockCommentChar = ["%{"; "%}"];
    else
        println("Invalid language, use JULIA, CPP or MATLAB");
        return 0;
    end
    m = open(genDir*"/"*name*genFileExtension, "w");

    global genfiles = Genfiles(m);

    # write headers
    generate_head(m,headerText);

    return genfiles;
end

function finalize_codegenerator()
    close(genfiles.main);
end

macro comment(file,line)
    return esc(quote
        println($file, commentChar * $line);
    end)
end

macro commentBlock(file,text)
    return esc(quote
        print($file, "\n"*blockCommentChar[1]*"\n"*text*"\n"*blockCommentChar[2]*"\n");
    end)
end

function generate_head(file, text)
    @comment(file,"This file was generated by Femshop.");
    @comment(file,"");
    @commentBlock(file, text);
end

end # module
