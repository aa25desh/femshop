#=
Module for code generation
=#
module CodeGenerator

export init_codegenerator, finalize_codegenerator, Genfiles,
        generate_main, generate_config, generate_prob, generate_mesh, generate_genfunction, 
        generate_bilinear, generate_linear, generate_stepper

import ..Femshop: JULIA, CPP, MATLAB, SQUARE, IRREGULAR, TREE, UNSTRUCTURED, CG, DG, HDG,
        NODAL, MODAL, LEGENDRE, UNIFORM, GAUSS, LOBATTO, NONLINEAR_NEWTON,
        NONLINEAR_SOMETHING, EULER_EXPLICIT, EULER_IMPLICIT, CRANK_NICHOLSON, RK4, LSRK4,
        ABM4, OURS, PETSC, VTK, RAW_OUTPUT, CUSTOM_OUTPUT, DIRICHLET, NEUMANN, ROBIN,
        MSH_V2, MSH_V4,
        SCALAR, VECTOR, TENSOR, SYM_TENSOR,
        LHS, RHS,
        LINEMESH, QUADMESH, HEXMESH
import ..Femshop: Femshop_config, Femshop_prob, GenFunction, Variable, Coefficient
import ..Femshop: log_entry, printerr
import ..Femshop: config, prob, mesh_data, grid_data, genfunctions, variables, coefficients, linears, bilinears

# Holds a set of file streams for generated code
mutable struct Genfiles
    main;       # Runs the computation
    config;     # global configuration
    problem;    # global problem specification
    mesh;       # contains the mesh/grid data
    genfunction;# Generated functions
    bilinear;   # bilinear function: bilinear(args) returns elemental matrix
    linear;     # linear function: linear(args) returns elemental vector
    stepper;    # optional time stepper for time dependent problems
    
    files;      # an iterable list of these files
    
    Genfiles(m,c,p,n,g,b,l,s) = new(m,c,p,n,g,b,l,s,[m,c,p,n,g,b,l,s]);
end

language = 0;
genDir = "";
genFileName = "";
genFileExtension = "";
commentChar = "";
blockCommentChar = [""; ""];
headerText = "";
genfiles = nothing;

include("generate_matlab_utils.jl");
include("generate_matlab_files.jl");

function init_codegenerator(lang, dir, name, header)
    if lang == JULIA
        global genFileExtension = ".jl";
        global commentChar = "#";
        global blockCommentChar = ["#="; "=#"];
        log_entry("Set code generation language to Julia.");
    elseif lang == CPP
        global genFileExtension = ".cpp";
        global commentChar = "//";
        global blockCommentChar = ["/*"; "*/"];
        log_entry("Set code generation language to C++.");
    elseif lang == MATLAB
        global genFileExtension = ".m";
        global commentChar = "%";
        global blockCommentChar = ["%{"; "%}"];
        log_entry("Set code generation language to Matlab.");
    else
        printerr("Invalid language, use JULIA, CPP or MATLAB");
        return nothing;
    end
    
    global language = lang;
    global genDir = dir;
    global genFileName = name;
    global headerText = header;
    
    m = open(genDir*"/"*name*genFileExtension, "w");
    c = open(genDir*"/Config"*genFileExtension, "w");
    p = open(genDir*"/Problem"*genFileExtension, "w");
    n = open(genDir*"/Mesh"*genFileExtension, "w");
    g = open(genDir*"/Genfunction"*genFileExtension, "w");
    b = open(genDir*"/Bilinear"*genFileExtension, "w");
    l = open(genDir*"/Linear"*genFileExtension, "w");
    s = open(genDir*"/Stepper"*genFileExtension, "w");
    
    global genfiles = Genfiles(m,c,p,n,g,b,l,s);
    
    # write headers
    generate_head(m,headerText);
    generate_head(c,"Configuration info");
    generate_head(p,"Problem info");
    generate_head(n,"Mesh");
    generate_head(g,"Generated functions");
    generate_head(b,"Bilinear term");
    generate_head(l,"Linear term");
    generate_head(s,"Time stepper");
    
    log_entry("Created code files for: "*name);
    
    return genfiles;
end

function finalize_codegenerator()
    for f in genfiles.files
        close(f);
    end
    log_entry("Closed generated code files.");
end

# These temporarily just do matlab. TODO select language
function generate_main()
    matlab_main_file();
end
function generate_config()
    matlab_config_file();
end
function generate_prob()
    matlab_prob_file();
end
function generate_mesh()
    matlab_mesh_file();
end
function generate_genfunction()
    matlab_genfunction_file();
end
function generate_bilinear(ex)
    matlab_bilinear_file(ex);
end
function generate_linear(ex)
    matlab_linear_file(ex);
end
function generate_stepper()
    matlab_stepper_file();
end
        
# private ###

macro comment(file,line)
    return esc(quote
        println($file, commentChar * $line);
    end)
end

macro commentBlock(file,text)
    return esc(quote
        print($file, "\n"*blockCommentChar[1]*"\n"*text*"\n"*blockCommentChar[2]*"\n");
    end)
end

function generate_head(file, text)
    @comment(file,"This file was generated by Femshop.");
    @commentBlock(file, text);
end

end # module
