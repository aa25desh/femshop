######################################
# Femshop Log for: elasticity
######################################

1.	Building simple hex mesh with nx*nx*nx elements, nx=10
2.	Added mesh with 1331 vertices and 1000 elements.
3.	Full grid has 27783 nodes.
4.	Grid building took 0.032584 seconds
5.	Added variable: u of type: vector
6.	Set test function symbol: v of type: vector
7.	Boundary condition: var=u bid=1 type=Dirichlet val=[0, 0, 0]
8.	Boundary condition: var=u bid=2 type=Neumann val=[0, 0, 0]
9.	Added coefficient mu : 10
10.	Added coefficient lambda : 1.25
11.	Generated function: genfunction_0
12.	Generated function: genfunction_1
13.	Generated function: genfunction_2
14.	Added coefficient f : ["0", "0", "-0.1"]
15.	Making weak form for variable(s): u
16.	Weak form, input: inner( (lambda * div(u) .* [1 0 0; 0 1 0; 0 0 1] + mu .* (grad(u) + transpose(grad(u)))), grad(v)) - dot(f,v)
17.	Weak form, symbolic layer:
lhs = _lambda_1*D1__u_1*D1__v_1 + _lambda_1*D1__u_1*D3__v_3 + _lambda_1*D1__v_1*D3__u_3 + _lambda_1*D2__u_2*D1__v_1 + _lambda_1*D2__u_2*D2__v_2 + _lambda_1*D2__u_2*D3__v_3 + _lambda_1*D2__v_2*D1__u_1 + _lambda_1*D2__v_2*D3__u_3 + _lambda_1*D3__u_3*D3__v_3 + 2*_mu_1*D1__u_1*D1__v_1 + _mu_1*D1__u_2*D1__v_2 + _mu_1*D1__u_3*D1__v_3 + _mu_1*D1__u_3*D3__v_1 + _mu_1*D1__v_3*D3__u_1 + _mu_1*D2__u_1*D1__v_2 + _mu_1*D2__u_1*D2__v_1 + 2*_mu_1*D2__u_2*D2__v_2 + _mu_1*D2__u_3*D2__v_3 + _mu_1*D2__u_3*D3__v_2 + _mu_1*D2__v_1*D1__u_2 + _mu_1*D2__v_3*D3__u_2 + _mu_1*D3__u_1*D3__v_1 + _mu_1*D3__u_2*D3__v_2 + 2*_mu_1*D3__u_3*D3__v_3
rhs = _v_1*_f_1 + _v_2*_f_2 + _v_3*_f_3
18.	Weak form, code layer: LHS = begin
    var = args[1]
    x = args[2]
    gbl = args[3]
    refel = args[4]
    borl = args[5]
    time = args[6]
    (detJ, J) = geometric_factors(refel, x)
    wgdetj = refel.wg .* detJ
    (RQ1, RQ2, RQ3, RD1, RD2, RD3) = build_deriv_matrix(refel, J)
    (TRQ1, TRQ2, TRQ3) = (RQ1', RQ2', RQ3')
    coef_1_1 = 1.25
    coef_0_1 = 10
    element_matrix = zeros(refel.Np * 3, refel.Np * 3)
    element_matrix[0 * refel.Np + 1:(0 + 1) * refel.Np, 0 * refel.Np + 1:(0 + 1) * refel.Np] += TRQ1 * (diagm(wgdetj .* coef_1_1) * RQ1)
    element_matrix[2 * refel.Np + 1:(2 + 1) * refel.Np, 2 * refel.Np + 1:(2 + 1) * refel.Np] += TRQ3 * (diagm(wgdetj .* coef_1_1) * RQ1)
    element_matrix[0 * refel.Np + 1:(0 + 1) * refel.Np, 0 * refel.Np + 1:(0 + 1) * refel.Np] += TRQ1 * (diagm(wgdetj .* coef_1_1) * RQ3)
    element_matrix[0 * refel.Np + 1:(0 + 1) * refel.Np, 0 * refel.Np + 1:(0 + 1) * refel.Np] += TRQ1 * (diagm(wgdetj .* coef_1_1) * RQ2)
    element_matrix[1 * refel.Np + 1:(1 + 1) * refel.Np, 1 * refel.Np + 1:(1 + 1) * refel.Np] += TRQ2 * (diagm(wgdetj .* coef_1_1) * RQ2)
    element_matrix[2 * refel.Np + 1:(2 + 1) * refel.Np, 2 * refel.Np + 1:(2 + 1) * refel.Np] += TRQ3 * (diagm(wgdetj .* coef_1_1) * RQ2)
    element_matrix[1 * refel.Np + 1:(1 + 1) * refel.Np, 1 * refel.Np + 1:(1 + 1) * refel.Np] += TRQ2 * (diagm(wgdetj .* coef_1_1) * RQ1)
    element_matrix[1 * refel.Np + 1:(1 + 1) * refel.Np, 1 * refel.Np + 1:(1 + 1) * refel.Np] += TRQ2 * (diagm(wgdetj .* coef_1_1) * RQ3)
    element_matrix[2 * refel.Np + 1:(2 + 1) * refel.Np, 2 * refel.Np + 1:(2 + 1) * refel.Np] += TRQ3 * (diagm(wgdetj .* coef_1_1) * RQ3)
    element_matrix[0 * refel.Np + 1:(0 + 1) * refel.Np, 0 * refel.Np + 1:(0 + 1) * refel.Np] += TRQ1 * (diagm(wgdetj .* (2 .* coef_0_1)) * RQ1)
    element_matrix[1 * refel.Np + 1:(1 + 1) * refel.Np, 1 * refel.Np + 1:(1 + 1) * refel.Np] += TRQ1 * (diagm(wgdetj .* coef_0_1) * RQ1)
    element_matrix[2 * refel.Np + 1:(2 + 1) * refel.Np, 2 * refel.Np + 1:(2 + 1) * refel.Np] += TRQ1 * (diagm(wgdetj .* coef_0_1) * RQ1)
    element_matrix[0 * refel.Np + 1:(0 + 1) * refel.Np, 0 * refel.Np + 1:(0 + 1) * refel.Np] += TRQ3 * (diagm(wgdetj .* coef_0_1) * RQ1)
    element_matrix[2 * refel.Np + 1:(2 + 1) * refel.Np, 2 * refel.Np + 1:(2 + 1) * refel.Np] += TRQ1 * (diagm(wgdetj .* coef_0_1) * RQ3)
    element_matrix[1 * refel.Np + 1:(1 + 1) * refel.Np, 1 * refel.Np + 1:(1 + 1) * refel.Np] += TRQ1 * (diagm(wgdetj .* coef_0_1) * RQ2)
    element_matrix[0 * refel.Np + 1:(0 + 1) * refel.Np, 0 * refel.Np + 1:(0 + 1) * refel.Np] += TRQ2 * (diagm(wgdetj .* coef_0_1) * RQ2)
    element_matrix[1 * refel.Np + 1:(1 + 1) * refel.Np, 1 * refel.Np + 1:(1 + 1) * refel.Np] += TRQ2 * (diagm(wgdetj .* (2 .* coef_0_1)) * RQ2)
    element_matrix[2 * refel.Np + 1:(2 + 1) * refel.Np, 2 * refel.Np + 1:(2 + 1) * refel.Np] += TRQ2 * (diagm(wgdetj .* coef_0_1) * RQ2)
    element_matrix[1 * refel.Np + 1:(1 + 1) * refel.Np, 1 * refel.Np + 1:(1 + 1) * refel.Np] += TRQ3 * (diagm(wgdetj .* coef_0_1) * RQ2)
    element_matrix[0 * refel.Np + 1:(0 + 1) * refel.Np, 0 * refel.Np + 1:(0 + 1) * refel.Np] += TRQ2 * (diagm(wgdetj .* coef_0_1) * RQ1)
    element_matrix[2 * refel.Np + 1:(2 + 1) * refel.Np, 2 * refel.Np + 1:(2 + 1) * refel.Np] += TRQ2 * (diagm(wgdetj .* coef_0_1) * RQ3)
    element_matrix[0 * refel.Np + 1:(0 + 1) * refel.Np, 0 * refel.Np + 1:(0 + 1) * refel.Np] += TRQ3 * (diagm(wgdetj .* coef_0_1) * RQ3)
    element_matrix[1 * refel.Np + 1:(1 + 1) * refel.Np, 1 * refel.Np + 1:(1 + 1) * refel.Np] += TRQ3 * (diagm(wgdetj .* coef_0_1) * RQ3)
    element_matrix[2 * refel.Np + 1:(2 + 1) * refel.Np, 2 * refel.Np + 1:(2 + 1) * refel.Np] += TRQ3 * (diagm(wgdetj .* (2 .* coef_0_1)) * RQ3)
    return element_matrix
end 
  RHS = begin
    var = args[1]
    x = args[2]
    gbl = args[3]
    refel = args[4]
    borl = args[5]
    time = args[6]
    (detJ, J) = geometric_factors(refel, x)
    wgdetj = refel.wg .* detJ
    coef_2_1 = zeros(refel.Np)
    coef_2_2 = zeros(refel.Np)
    coef_2_3 = zeros(refel.Np)
    for coefi = 1:refel.Np
        coef_2_1[coefi] = (Femshop.genfunctions[1]).func(x[coefi, 1], x[coefi, 2], x[coefi, 3], time)
        coef_2_2[coefi] = (Femshop.genfunctions[2]).func(x[coefi, 1], x[coefi, 2], x[coefi, 3], time)
        coef_2_3[coefi] = (Femshop.genfunctions[3]).func(x[coefi, 1], x[coefi, 2], x[coefi, 3], time)
    end
    element_vector = zeros(refel.Np * 3)
    element_vector[0 * refel.Np + 1:(0 + 1) * refel.Np] += (refel.Q)' * (wgdetj .* (refel.Q * coef_2_1))
    element_vector[1 * refel.Np + 1:(1 + 1) * refel.Np] += (refel.Q)' * (wgdetj .* (refel.Q * coef_2_2))
    element_vector[2 * refel.Np + 1:(2 + 1) * refel.Np] += (refel.Q)' * (wgdetj .* (refel.Q * coef_2_3))
    return element_vector
end
19.	Generated function: genfunction_3
20.	Generated function: genfunction_4
21.	Assembly took 75.0452057 seconds
22.	Linear solve took 1.055413601 seconds
23.	Solved for u.(took 76.1371161 seconds)
24.	Dumping configuration:
25.		dimension = 3
26.		geometry = square
27.		mesh_type = grid
28.		solver_type = CG
29.		trial_function = Legendre
30.		test_function = Legendre
31.		elemental_nodes = Lobatto
32.		quadrature = Gauss
33.		p_adaptive = false
34.		basis_order_min = 2
35.		basis_order_max = 2
36.		linear = true
37.		t_adaptive = false
38.		stepper = Euler-implicit
39.		linalg_matrixfree = false
40.		linalg_matfree_max = 1
41.		linalg_matfree_tol = 1.0
42.		linalg_backend = ours
43.		output_format = vtk
44.	Dumping problem:
45.		bc_type = ["Dirichlet" "Neumann"]
46.		bid = [1 2]
47.		bc_func = Any[Any[0, 0, 0] Any[0, 0, 0]]
48.		time_dependent = false
49.		end_time = 0.0
50.		initial = Any[]
51.		lhs_time_deriv = Bool[]
52.	Completed. Closing Log.
